<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.east.logistics.dao.NetworkMapper">
    <resultMap id="BaseResultMap" type="com.east.logistics.entity.Network">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="n_id" jdbcType="INTEGER" property="nId" />
        <result column="n_province" jdbcType="VARCHAR" property="nProvince" />
        <result column="n_city" jdbcType="VARCHAR" property="nCity" />
        <result column="n_county" jdbcType="VARCHAR" property="nCounty" />
        <result column="n_address" jdbcType="VARCHAR" property="nAddress" />
        <result column="n_in" jdbcType="INTEGER" property="nIn" />
        <result column="n_out" jdbcType="INTEGER" property="nOut" />
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from network
        where n_id = #{nId,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.east.logistics.entity.Network">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into network (n_id, n_province, n_city,
        n_county, n_address, n_in,
        n_out)
        values (#{nId,jdbcType=INTEGER}, #{nProvince,jdbcType=VARCHAR}, #{nCity,jdbcType=VARCHAR},
        #{nCounty,jdbcType=VARCHAR}, #{nAddress,jdbcType=VARCHAR}, #{nIn,jdbcType=INTEGER},
        #{nOut,jdbcType=INTEGER})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.east.logistics.entity.Network">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update network
        set n_province = #{nProvince,jdbcType=VARCHAR},
        n_city = #{nCity,jdbcType=VARCHAR},
        n_county = #{nCounty,jdbcType=VARCHAR},
        n_address = #{nAddress,jdbcType=VARCHAR},
        n_in = #{nIn,jdbcType=INTEGER},
        n_out = #{nOut,jdbcType=INTEGER}
        where n_id = #{nId,jdbcType=INTEGER}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select n_id, n_province, n_city, n_county, n_address, n_in, n_out
        from network
        where n_id = #{nId,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select n_id, n_province, n_city, n_county, n_address, n_in, n_out
        from network
    </select>

    <select id="count" resultType="java.lang.Integer">
      select count (*) from network
    </select>
    <select id="countVague" resultType="java.lang.Integer">
        select count (*) from network
        <where>
            <if test="nAddress != null">
                and n_address like concat('%',#{nAddress},'%')
            </if>
            <if test="nIn != null ">
                and n_in like concat('%',#{nIn},'%')
            </if>
            <if test="nOut != null ">
                and n_out like concat('%',#{nOut},'%')
            </if>
        </where>
    </select>
    <select id="selectVague" resultType="com.east.logistics.entity.Report">
        select * from network
        <where>
            <if test="nAddress != null">
                and n_address like concat('%',#{nAddress},'%')
            </if>
            <if test="nIn != null">
                and n_in like concat('%',#{nIn},'%')
            </if>
            <if test="nOut != null ">
                and n_out like concat('%',#{nOut},'%')
            </if>
        </where>
    </select>
</mapper>